// <copyright file="PreCharityRegistrationUpdate.cs" company="Microsoft">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>12/18/2015 11:24:29 AM</date>
// <summary>Implements the PreCharityRegistrationUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace NPRP.PortalAlignment.Plugins
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using System.Text;
    using System.Threading.Tasks;
    using Microsoft.Xrm.Sdk;
    
    /// <summary>
    /// Pre Charity Registration Update
    /// </summary>
    public class PreCharityRegistrationUpdate : Plugin
    {
        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes before the core platform operation executes.
        /// The image contains the following attributes:
        /// Charity ID
        /// </summary>
        private readonly string preImageAlias = "PreImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PreCharityRegistrationUpdate"/> class.
        /// </summary>
        public PreCharityRegistrationUpdate()
            : base(typeof(PreCharityRegistrationUpdate))
        {
            RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Update", "crs_charityinitialregistration", new Action<LocalPluginContext>(this.ExecutePreCharityRegistrationUpdate)));
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreCharityRegistrationUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            ITracingService tracingService = localContext.TracingService;
            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService orgService = localContext.OrganizationService;
            
            Entity targetEntity = context.InputParameters.ContainsKey(Resource.Target) ? context.InputParameters[Resource.Target] as Entity : null;
            Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains(this.preImageAlias)) ? context.PreEntityImages[this.preImageAlias] : null;

            if (targetEntity == null || preImageEntity == null)
            {
                return;
            }

            try
            {
 //<****************************************************Beginning of Donovan PFR Registration Subgrid Record Validation Plugin Code. Last Updated 7/28/2017*************************************************************************************************>
 /*<Code Summary>
 This part of the plugin is to validate whether or not the child entities(subgrids) on certain webform steps have at least 5 records if the user answers 'Yes' on 
 Certain Boolean Fields
  */
                //Field to capture the webform step id. This field is set via the client side JavaScript Code written at the webpage level
                string targetCharityRegWebformStep = (string)targetEntity["crs_webformstepid"];

                SubgridValidatorHelper subgridHelper = new SubgridValidatorHelper();


                if (targetCharityRegWebformStep != null && targetCharityRegWebformStep == "23f94f36-9d56-e711-80f3-005056900bb7") 
                {
                    bool commonQuestion14 = (bool)targetEntity["crs_cmnquestion14"];

                    if (commonQuestion14 == true)
                    {
                        Boolean cmnsubgrid1 = subgridHelper.SubgridRecordCountIsValid(orgService, targetEntity.Id, "crs_pfrandcoventure", "crs_charityregistrationcoventureidid", 5);
                        
                        if (!cmnsubgrid1)//if(cmnsubgrid1== false)
                        {
                            throw new InvalidPluginExecutionException("You answered yes to the question: 'Has the organization used a commercial co-venture?' You must enter at least 5 records.");
                        }
                    }
                }
                if (targetCharityRegWebformStep != null && targetCharityRegWebformStep == "b504c31b-9f56-e711-80f3-005056900bb7")
                {
                    bool shortFormQuestion1 = (bool)targetEntity["crs_shrtquestion1"];
                    bool shortFormQuestion6 = (bool)targetEntity["crs_shrtquestion6"];

                    if (shortFormQuestion1 == true)
                    {
                        Boolean shortsubgrid1 = subgridHelper.SubgridRecordCountIsValid(orgService, targetEntity.Id, "crs_statessolicitedin", "crs_charityregstatessolicitedid", 5);

                        if (!shortsubgrid1)//if(shortsubgrid1== false)
                        {
                            throw new InvalidPluginExecutionException("You answered yes to the question: 'Does the organization register or solicit in other states?' You must enter at least 5 records.");
                        }
                    }
                    if (shortFormQuestion6 == true)
                    {
                        Boolean shortsubgrid2 = subgridHelper.SubgridRecordCountIsValid(orgService, targetEntity.Id, "crs_highestpaidemployee", "crs_charityreghighestpaidemployeeid", 5);

                        if (!shortsubgrid2)//if(shortsubgrid2== false)
                        {
                            throw new InvalidPluginExecutionException("You answered yes to the question: 'Does the organization have five employees that are compensated the most?' You must enter at least 5 records.");
                        }
                    }
                }
                if (targetCharityRegWebformStep != null && targetCharityRegWebformStep == "39f09960-9f56-e711-80f3-005056900bb7")
                {
                    bool longFormQuestion1 = (bool)targetEntity["crs_longquestion1"];
                    bool longFormQuestion2 = (bool)targetEntity["crs_longquestion2"];
                    bool longFormQuestion11 = (bool)targetEntity["crs_longquestion11"];

                    if (longFormQuestion1 == true)
                    {
                        Boolean longsubgrid1 = subgridHelper.SubgridRecordCountIsValid(orgService, targetEntity.Id, "crs_statessolicitedin", "crs_charityregstatessolicitedid", 5);

                        if (!longsubgrid1)//if(longsubgrid1== false)
                        {
                            throw new InvalidPluginExecutionException("You answered yes to the question: 'Does the organization register or solicit in other states?' You must enter at least 5 records.");
                        }
                    }
                    if (longFormQuestion2 == true)
                    {
                        Boolean longsubgrid2 = subgridHelper.SubgridRecordCountIsValid(orgService, targetEntity.Id, "crs_charityaffiliate", "crs_charityregistrationaffiliateid", 5);

                        if (!longsubgrid2)//if(longsubgrid2== false)
                        {
                            throw new InvalidPluginExecutionException("You answered yes to the question: 'Does the organization have affiliates which share the contributions or other revenue it raised in New Jersey?' You must enter at least 5 records.");
                        }
                    }
                    if (longFormQuestion11 == true)
                    {
                        Boolean longsubgrid11 = subgridHelper.SubgridRecordCountIsValid(orgService, targetEntity.Id, "crs_highestpaidemployee", "crs_charityreghighestpaidemployeeid", 5);

                        if (!longsubgrid11)//if(longsubgrid11== false)
                        {
                            throw new InvalidPluginExecutionException("You answered yes to the question: 'Does the organization have five employees that are compensated the most?' You must enter at least 5 records.");
                        }
                    }
                }
                if (targetCharityRegWebformStep == null)
                {
                    return;
                }




//<****************************************************End of Donovan PFR Registration Subgrid Record Validation Plugin Code. Last Updated 7/28/2017*************************************************************************************************>
 /* As of 7/28/2017 Lenin be sure to do regression testing on the filtering attributes
 * The plugin was firing on all attributes on the update step before
 * Donovan changed this so that the filtering attributes are only: crs_p_decl_inforeviewed, crs_p_decl_supportingdocumentsuploaded, crs_p_decl_madeupdaterequestbyNPRP
 * 
 */
                
                
                
                PreCharityRegistrationUpdateHelper helper = new PreCharityRegistrationUpdateHelper();
                helper.PerformOperation(orgService, targetEntity, preImageEntity);

                // Clear off the acknowledgement related fields which are displayed on the declaration page. This is to ensure that the user explicitly checks them each time
                targetEntity["crs_p_decl_inforeviewed"] = false;
                targetEntity["crs_p_decl_supportingdocumentsuploaded"] = false;
                targetEntity["crs_p_decl_madeupdaterequestbyNPRP"] = false;
            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                Logger.Log(string.Format(CultureInfo.InvariantCulture, "{0} {1}", "Exception: {0}", e.ToString()), null, tracingService);
                throw;
            }
            finally
            {
                Logger.Log(string.Format(CultureInfo.InvariantCulture, "{0} {1}", "Exiting {0}.Execute()", this.ChildClassName), null, tracingService);                
            }
        } 
    }
}
